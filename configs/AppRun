#! /bin/bash

# Export APPRUN if running from an extracted image
self="$(readlink -f -- $0)"
here="${self%/*}"
APPDIR="${APPDIR:-${here}}"

# Export TCl/Tk
export PATH=$PATH:"${APPDIR}/usr/bin"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
export TCL_LIBRARY="${APPDIR}/usr/share/tcltk/$(ls -A ${APPDIR}/usr/share/tcltk/ | head -1)"
export TK_LIBRARY="${APPDIR}/usr/share/tcltk/$(ls -A ${APPDIR}/usr/share/tcltk/ | tail -1)"
export TKPATH="${TK_LIBRARY}"

# Call the entry point
for opt in "$@"; do
  [ "${opt:0:1}" != "-" ] && break
  if [[ "${opt}" =~ "I" ]] || [[ "${opt}" =~ "E" ]]; then
    # Environment variables are disabled ($PYTHONHOME). Let's run in a safe
    # mode from the raw Python binary inside the AppImage
    "$APPDIR/opt/python3.10/bin/python3.10 $APPDIR/opt/src/main.py" "$@"
    exit "$?"
  fi
done

# Get the executable name, i.e. the AppImage or the python binary if running from an
# extracted image
executable="${APPDIR}/opt/python3.10/bin/python3.10 ${APPDIR}/opt/src/main.py"
if [[ "${ARGV0}" =~ "/" ]]; then
  executable="$(cd $(dirname ${ARGV0}) && pwd)/$(basename ${ARGV0})"
elif [[ "${ARGV0}" != "" ]]; then
  executable=$(which "${ARGV0}")
fi

# Wrap the call to Python in order to mimic a call from the source
# executable ($ARGV0), but potentially located outside of the Python
# install ($PYTHONHOME)
(PYTHONHOME="${APPDIR}/opt/python3.10" exec -a "${executable}" "$APPDIR/opt/python3.10/bin/python3.10" "$APPDIR/opt/src/main.py" "$@")
exit "$?"
